#!/usr/bin/env python3
import argparse
import os
import signal
from os import path

import gi

gi.require_version("Gtk", "3.0")
gi.require_version("WebKit2", "4.0")
from gi.repository import Gtk, WebKit2  # noqa: E402

parser = argparse.ArgumentParser()
parser.add_argument("--host", required=True)
parser.add_argument("--image", default="ghcr.io/fabianonunes/saml-vpn:0.0.2")
args, mass = parser.parse_known_args()


class Browser:
    window = None
    cookie = None
    terminal = None
    box = None
    pid = None

    def run(self):
        Gtk.init(None)
        self.window = Gtk.Window(title="VPN", icon_name="network-vpn")
        self.window.connect("delete-event", self.quit)
        self.window.resize(550, 750)

        self.box = Gtk.Box(orientation=Gtk.Orientation.VERTICAL)
        self.window.add(self.box)

        ctx = WebKit2.WebContext.get_default()
        cookie_storage_path = path.expanduser("~/.cache/openfortivpn.cookies")

        cookie_manager = ctx.get_cookie_manager()
        cookie_manager.set_persistent_storage(
            cookie_storage_path, WebKit2.CookiePersistentStorage.TEXT
        )

        web_view = WebKit2.WebView()
        web_view.connect("load-changed", self.page_changed, cookie_manager)
        web_view.load_uri(f"https://{args.host}")

        self.box.pack_start(web_view, True, True, 0)

        self.window.show_all()

        return self

    def page_changed(self, webview, event, cookie_manager):
        if event != WebKit2.LoadEvent.FINISHED:
            return
        mr = webview.get_main_resource()
        cookie_manager.get_cookies(mr.get_uri(), None, self.on_receive_cookie)

    def on_receive_cookie(self, cookie_manager, result):
        if self.cookie:
            return
        cookies = cookie_manager.get_cookies_finish(result)
        cookie = next(filter(lambda c: c.name == "SVPNCOOKIE", cookies), None)
        if cookie:
            self.cookie = f"{cookie.name}={cookie.value}"
            self.connect()

    def build_cmd(self):
        priv = "env" if os.access("/var/run/docker.sock", os.W_OK | os.R_OK) else "sudo"
        cmd = (
            f"/usr/bin/{priv} docker run --init --network=host --device=/dev/ppp "
            f"--cap-add=NET_ADMIN --volume /etc/resolv.conf:/etc/resolv.conf --rm "
            f"-i {args.image} {args.host} --svpn-cookie {self.cookie} {' '.join(mass)}"
        )
        return cmd.strip().split(" ")

    def quit(self, _a=None, _b=None):
        try:
            self.stop_container()
            self.window.destroy()
            Gtk.main_quit()
            while Gtk.events_pending():
                Gtk.main_iteration()
        except Exception as err:
            print(err)
            exit(1)

    def connect(self):
        scroller = self.build_vte()
        self.box.pack_start(scroller, True, True, 0)
        self.window.show_all()
        self.terminal.grab_focus()

    def stop_container(self, _a=None, _b=None):
        if not self.terminal:
            return
        # o openfortivpn n√£o reage ao SIGHUP propagado pelo Vte ao sair
        try:
            self.terminal.feed_child(b"\x03")  # CTRL+C
        except:  # noqa
            # Ubuntu 18.04 ainda usa vte < 0.59.91
            self.terminal.feed_child("\x03", -1)

    def build_vte(self):
        gi.require_version("Vte", "2.91")
        from gi.repository import Vte

        self.terminal = Vte.Terminal()
        _, self.pid = self.terminal.spawn_sync(
            Vte.PtyFlags.DEFAULT,  # pty_flags
            os.environ["HOME"],  # working_directory
            self.build_cmd(),  # argv
            [],  # envv
            0,  # spawn_flags: GLib.SpawnFlags.DEFAULT
        )

        scroller = Gtk.ScrolledWindow()
        scroller.add(self.terminal)
        return scroller


if __name__ == "__main__":
    b = Browser().run()
    signal.signal(signal.SIGINT, b.quit)
    Gtk.main()
